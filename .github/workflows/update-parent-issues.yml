name: Update Parent Issues

on:
  issue_comment:
    types: [created]

jobs:
  update-parent-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Fetch issue details and update parent issues
        run: |
          # Get issue number from event payload
          issue_number=$(jq -r .issue.number "$GITHUB_EVENT_PATH")

          # Fetch issue body for the triggered issue
          issue_body=$(gh issue view "$issue_number" --json body --jq '.body')
          echo "Issue body: $issue_body"

          # Extract parent IDs from the 'Parents:' line
          parents_line=$(echo "$issue_body" | grep -i 'Parents:')
          echo "Parents line: $parents_line"

          parent_ids=$(echo "$parents_line" | grep -oP '#\d+' | tr -d '#')
          echo "Parent IDs: $parent_ids"

          # Function to fetch issue body and comment count
          fetch_issue_details() {
            gh issue view "$1" --json body,comments --jq '{body: .body, comments: .comments.totalCount}'
          }

          # Function to update parent issue
          update_parent_issue() {
            local parent_id="$1"
            local updated_description="$2"
            gh issue edit "$parent_id" --body "$updated_description"
          }

          # Function to build the child issues array
          build_child_array() {
            local issues=("$@")
            local child_array="### Children (Top 5 Most Busiest Issues):"
            
            for issue in "${issues[@]}"; do
              local id=$(echo "$issue" | jq -r '.id')
              local count=$(echo "$issue" | jq -r '.comments')
              child_array+="\n- Issue #$id with $count comments"
            done
            
            echo -e "$child_array"
          }

          # Process each parent issue
          for parent_id in $parent_ids; do
            echo "Processing parent #$parent_id"

            # Fetch the current parent issue description
            parent_issue_description=$(fetch_issue_details "$parent_id" | jq -r '.body')
            echo "Parent issue description: $parent_issue_description"

            # Clear existing 'Children:' section
            updated_description=$(echo "$parent_issue_description" | sed '/Children:/d')
            echo "Updated description after clearing Children: $updated_description"

            # Fetch details of all child issues linked to the parent
            child_issues=()
            for child in $(echo "$issue_body" | grep -oP '#\d+' | tr -d '#'); do
              details=$(fetch_issue_details "$child" | jq -c --arg id "$child" '{id: $id, comments: .comments}')
              child_issues+=("$details")
            done

            # Sort the child issues by comment count in descending order and pick the top 5
            sorted_issues=$(printf "%s\n" "${child_issues[@]}" | jq -s 'sort_by(-.comments)[:5]')

            # Build the updated Children array for the


name: Update Parent Issues on Comment

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: read
  contents: read

jobs:
  update-parent-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

      - name: Update Parent Issues
        run: |
          set -e

          ISSUE_NUMBER=${{ github.event.issue.number }}
          REPO=${{ github.repository }}

          echo "Fetching issue body for issue #$ISSUE_NUMBER"
          BODY=$(gh issue view $ISSUE_NUMBER --json body -q .body)
          echo "Issue body: $BODY"

          echo "Extracting parent issues"
          # Adjusting the regular expression to correctly match "Parents:#<numbers>"
          PARENTS_LINE=$(echo "$BODY" | grep -oP 'Parents:\s*#[0-9, ]+')
          
          if [ -z "$PARENTS_LINE" ]; then
            echo "No Parents found in the issue body for #$ISSUE_NUMBER, exiting."
            exit 1
          fi
          
          echo "Parents line: $PARENTS_LINE"

          # Extracting the parent IDs
          PARENT_IDS=$(echo "$PARENTS_LINE" | grep -oP '#\d+' | grep -oP '\d+')
          
          if [ -z "$PARENT_IDS" ]; then
            echo "No valid parent IDs found in the line: $PARENTS_LINE"
            exit 1
          fi

          echo "Parent IDs: $PARENT_IDS"

          for PARENT_ID in $PARENT_IDS; do
            echo "Processing parent #$PARENT_ID"

            PARENT_DESCRIPTION=$(gh issue view $PARENT_ID --json body -q .body)
            echo "Parent issue description: $PARENT_DESCRIPTION"

            # Fetch all child issues related to the current parent
            CHILD_ISSUES=$(gh issue list --repo $REPO --json number,body,comments | jq --arg parent_id "#$PARENT_ID" '
              .[] | select(.body | contains("Parents: " + $parent_id)) | {
                number: .number,
                comments: .comments
              }
            ')
            echo "Raw child issues: $CHILD_ISSUES"

            if [ -z "$CHILD_ISSUES" ]; then
              echo "No child issues found for parent #$PARENT_ID."
              continue
            fi

            # Extract the top 5 most commented (busiest) child issues
            BUSIEST_CHILDREN=$(echo "$CHILD_ISSUES" | jq -r '
              sort_by(-.comments) | .[] | "#\(.number)"
            ' | head -n 5 | tr '\n' ',' | sed 's/,$//')
            
            echo "Busiest child issues: $BUSIEST_CHILDREN"

            # Update the parent issue description with the new line "Child: #4, #3, ..."
            FINAL_DESCRIPTION=$(echo -e "Child: $BUSIEST_CHILDREN\n\n$PARENT_DESCRIPTION")
            echo "Final description: $FINAL_DESCRIPTION"

            # Update the parent issue with the new description
            gh issue edit $PARENT_ID --body "$FINAL_DESCRIPTION"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

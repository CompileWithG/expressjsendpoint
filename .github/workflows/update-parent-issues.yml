name: Update Parent Issues on Comment

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: read
  contents: read

jobs:
  update-parent-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Authenticate with GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Update Parent Issues
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          REPO=${{ github.repository }}

          # Fetch the issue description
          DESCRIPTION=$(gh issue view $ISSUE_NUMBER --json body -q .body)

          # Find the "Parents" line in the description
          PARENTS_LINE=$(echo "$DESCRIPTION" | grep -oP 'Parents:\s*#[0-9, ]+')
          if [ -z "$PARENTS_LINE" ]; then
            echo "No Parents found, exiting."
            exit 0
          fi

          # Extract parent issue numbers
          PARENT_IDS=$(echo "$PARENTS_LINE" | grep -oP '#\d+' | grep -oP '\d+')

          # Loop through each parent and update its description
          for PARENT_ID in $PARENT_IDS; do
            # Get top 5 busiest child issues and format as a list
            TOP_ISSUES=$(gh issue list --repo $REPO --search "Parents: #$PARENT_ID" --json number,comments,title,url --jq '.[] | "- [#" + (.number|tostring) + "](" + .url + ") - " + .title + " (" + (.comments|tostring) + " comments)"' | head -n 5 | tr '\n' '\n')

            # Create the block with the busiest child issues
            TOP_ISSUES_BLOCK="## Top 5 Busiest Child Issues\n<!-- TOP_5_CHILD_ISSUES_START -->\n$TOP_ISSUES\n<!-- TOP_5_CHILD_ISSUES_END -->"

            # Fetch the current description of the parent issue
            PARENT_DESCRIPTION=$(gh issue view $PARENT_ID --json body -q .body)

            # Check if delimiters exist
            if echo "$PARENT_DESCRIPTION" | grep -q "<!-- TOP_5_CHILD_ISSUES_START -->"; then
              # Replace existing block between delimiters
              UPDATED_DESCRIPTION=$(echo "$PARENT_DESCRIPTION" | sed -e "/<!-- TOP_5_CHILD_ISSUES_START -->/,/<!-- TOP_5_CHILD_ISSUES_END -->/c $TOP_ISSUES_BLOCK")
            else
              # Append new block if delimiters do not exist
              UPDATED_DESCRIPTION="$PARENT_DESCRIPTION\n\n$TOP_ISSUES_BLOCK"
            fi

            # Update the parent issue description
            gh issue edit $PARENT_ID --body "$UPDATED_DESCRIPTION"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
